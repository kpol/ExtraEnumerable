<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;

namespace ExtraLinq
{
    public static partial class ExtraEnumerable
    {
<# string[] types = {"int", "uint", "long", "ulong"};
		foreach (var type in types) {#>
        public static <#= type #> Sum(this <#= type #>[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            <#= type #> sum = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                }
            }

            return sum;
        }

        public static <#= type #>? Sum(this <#= type #>?[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            <#= type #> sum = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                    }
                }
            }

            return sum;
        }

		public static <#= type #> Sum(this List<<#= type #>> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            <#= type #> sum = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                }
            }

            return sum;
        }

		public static <#= type #>? Sum(this List<<#= type #>?> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            <#= type #> sum = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                    }
                }
            }

            return sum;
        }
<# } #>
<# string[] typesFloating = {"float", "double", "decimal"};
		foreach (var type in typesFloating) {#>
        public static <#= type #> Sum(this <#= type #>[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

<# if (type == "float") {#>
            double sum = 0;
<# } #>
<# else { #>
			<#= type #> sum = 0;
<# } #>

            foreach (var i in source)
            {
                sum += i;
            }

            return <#= type == "float" ? "(float)" : string.Empty#>sum;
        }

        public static <#= type #>? Sum(this <#= type #>?[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

<# if (type == "float") {#>
            double sum = 0;
<# } #>
<# else { #>
			<#= type #> sum = 0;
<# } #>

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    sum += i.Value;
                }
            }

            return <#= type == "float" ? "(float)" : string.Empty#>sum;
        }

		public static <#= type #> Sum(this List<<#= type #>> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

<# if (type == "float") {#>
            double sum = 0;
<# } #>
<# else { #>
			<#= type #> sum = 0;
<# } #>

            foreach (var i in source)
            {
                sum += i;
            }

            return <#= type == "float" ? "(float)" : string.Empty#>sum;
        }

		public static <#= type #>? Sum(this List<<#= type #>?> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

<# if (type == "float") {#>
            double sum = 0;
<# } #>
<# else { #>
			<#= type #> sum = 0;
<# } #>

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    sum += i.Value;
                }
            }

            return <#= type == "float" ? "(float)" : string.Empty#>sum;
        }
<#}#>
	}
}