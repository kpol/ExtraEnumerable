//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;

namespace ExtraLinq
{
    public static partial class ExtraEnumerable
    {
        public static double Average(this int[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            long sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this int?[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            long sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double Average(this List<int> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            long sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this List<int?> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            long sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }
        public static double Average(this uint[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            ulong sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this uint?[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            ulong sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double Average(this List<uint> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            ulong sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this List<uint?> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            ulong sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }
        public static double Average(this long[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            long sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this long?[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            long sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double Average(this List<long> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            long sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this List<long?> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            long sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }
        public static double Average(this ulong[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            ulong sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this ulong?[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            ulong sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double Average(this List<ulong> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            ulong sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this List<ulong?> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            ulong sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }
        public static double Average(this float[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            double sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this float?[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            double sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double Average(this List<float> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            double sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this List<float?> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            double sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }
        public static double Average(this double[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            double sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this double?[] source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            double sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double Average(this List<double> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            double sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                checked
                {
                    sum += i;
                    count++;
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }

        public static double? Average(this List<double?> source)
        {
            if (source == null) throw Error.ArgumentNull(nameof(source));

            double sum = 0;
            long count = 0;

            foreach (var i in source)
            {
                if (i.HasValue)
                {
                    checked
                    {
                        sum += i.Value;
                        count++;
                    }
                }
            }

            if (count > 0)
            {
                return (double)sum / count;
            }

            throw Error.NoElements();
        }
    }
}